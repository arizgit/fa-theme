<style>
  .countdown-timer-section {
    padding: 10px;
  }
  .countdown-timer-section h5 {
    text-transform: uppercase;
    font-weight: bold;
    text-align: center;
    letter-spacing: 1px;
  }
  .timer {
    margin: 10px 0;
  }
  .timer--expired {
    display: none;
  }
  .timer__title {
    @extend .paragraph;
    text-align: center;
  }
  .timer-display {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
    margin-top: 5px;
    padding: 0 60px;
  }
  .timer-block {
    position: relative;
    width: 21%;
    margin: 0px 2%;
  }
  .timer-block__num {
    background: #fff;
    color: #000;
    font-weight: 800;
    font-size: 38px;
    font-family: 'aktiv-grotesk-thin', sans-serif;
    border-radius: 5px;
  }
  .timer-block__unit {
    color: #fff;
    font-size: 0.889rem;
    padding: 10px;
  }
  .timer-block__num,
  .timer-block__unit {
    display: block;
    text-align: center;
  }
  .icons-container {
    display: flex;
    flex-direction: column;
  }
  .icons-container .icon-container {
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin-bottom: 10px;
  }
  .icons-container .icon-container img {
    width: 55px;
  }
  .icons-container .text-container {
    display: flex;
    justify-content: space-around;
    align-items: start;
    text-align: center;
    font-size: 14px;
  }
  .icons-container .text-container p {
    width: 28%;
    text-transform: uppercase;
  }
  @media (max-width: 768px) {
    .icons-container {
      overflow: auto;
      padding-bottom: 30px;
    }
    .icons-container .icon-container {
      width: 126%;
    }
    .icons-container .text-container {
      width: 126%;
    }
  }
  @media only screen and (max-width: 580px) {
    .timer-display {
      padding: 0 !important;
    }
  }
</style>

{% comment %}
  removing the section.id segment - only needed if more than one product section per page
  {%- capture product_form_id -%}product-form-{{ product.id }}-{{ section.id }}{%- endcapture -%}
{% endcomment %}
{%- capture product_form_id -%}product-form-{{ product.id }}{%- endcapture -%}

<safe-sticky class="product-info {{ class }}">
  {%- for block in section.blocks -%}
    {%- assign previous_block_index = forloop.index0 | minus: 1 -%}
    {%- assign previous_block = section.blocks[previous_block_index] -%}
    {%- assign next_block = section.blocks[forloop.index] -%}

    {%- case block.type -%}
      {%- when '@app' -%}
        {%- render block -%}

      {%- when 'vendor' -%}
        {%- if product.vendor != blank -%}
          <div class="product-info__vendor" {{ block.shopify_attributes }}>
            {%- render 'vendor' with product.vendor -%}
          </div>
        {%- endif -%}

      {%- when 'upsell-block' -%}
        {%- if product.metafields.custom.bundle_product != blank -%}
          <div class="product-upsell" {{ block.shopify_attributes }}>
            {%- render 'upsell-product', product: product, settings: block.settings -%}
          </div>
        {%- endif -%}

      {%- when 'title' -%}
        {%- if request.page_type == 'product' -%}
          <h1 class="product-info__title {{ block.settings.heading_tag }}" {{ block.shopify_attributes }}>
            <span>{{ product.title }}</span>
          </h1>
        {%- else -%}
          <h2 class="product-info__title {{ block.settings.heading_tag }}" {{ block.shopify_attributes }}>
            <a href="{{ product.url }}">{{ product.title }}</a>
          </h2>
        {%- endif -%}

      {%- when 'badges' -%}
        {%- render 'product-badges',
          product: product,
          types: 'custom',
          form_id: product_form_id,
          class: 'product-info__badge-list',
          block: block
        -%}

      {%- when 'sku' -%}
        <variant-sku
          form="{{ product_form_id }}"
          class="product-info__sku text-xs text-subdued"
          {% if product.selected_or_first_available_variant.sku == blank %}
            hidden
          {% endif %}
          {{ block.shopify_attributes }}
        >
          {{- 'product.general.sku' | t }}
          {{ product.selected_or_first_available_variant.sku -}}
        </variant-sku>

      {%- when 'price' -%}
        <div class="product-info__price">
          <div class="rating-with-text">
            {% assign upsell_product = product.metafields.custom.bundle_product.value %}
            <div id="product-info-price-container">
              {% if product.metafields.custom.sale_price != blank and product.metafields.custom.list_price != blank %}
                {%- render 'price-list',
                  list_price: product.metafields.custom.list_price,
                  sale_price: product.metafields.custom.sale_price,
                  variant: product.selected_or_first_available_variant,
                  size: 'lg',
                  block: block
                -%}
              {% else %}
                {%- render 'price-list',
                  variant: product.selected_or_first_available_variant,
                  form_id: product_form_id,
                  size: 'lg',
                  block: block
                -%}
              {% endif %}
            </div>
            <div id="bundle-info-price-container" style="display: none;">
              {% if product.metafields.custom.leg_developer_sale_price != blank and product.metafields.custom.leg_developer_list_price != blank %}
                {%- render 'upsell-price-list',
                  list_price: product.metafields.custom.leg_developer_list_price,
                  sale_price: product.metafields.custom.leg_developer_sale_price,
                  variant: product.selected_or_first_available_variant,
                  size: 'lg',
                  block: block
                -%}
              {% else %}
                {%- render 'upsell-price-list',
                  variant: product.selected_or_first_available_variant,
                  upsell_variant: upsell_product.selected_or_first_available_variant,
                  size: 'lg',
                  block: block
                -%}
              {% endif %}
            </div>
            {%- if block.settings.show_badges -%}
              {%- render 'product-badges',
                types: 'sold_out, discount',
                product: product,
                form_id: product_form_id,
                class: 'product-info__badge-list'
              -%}
            {%- endif -%}

            {%- comment -%}If the next block is a rating block, then we add it as part of this one to have it inline{%- endcomment -%}
            {%- if next_block.type == 'rating' -%}
              {%- render 'product-rating',
                product: product,
                show_empty: next_block.settings.show_empty,
                block: next_block
              -%}
            {%- endif -%}
          </div>

          {%- if block.settings.show_taxes_notice -%}
            <p class="text-sm text-subdued">
              {%- if cart.taxes_included -%}
                {{ 'product.general.taxes_included' | t }}
              {%- else -%}
                {{ 'product.general.taxes_excluded' | t }}
              {%- endif -%}

              {%- if shop.shipping_policy.body != blank -%}
                {{ 'product.general.shipping_policy_html' | t: link: shop.shipping_policy.url }}
              {%- endif -%}
            </p>
          {%- endif -%}
        </div>

      {%- when 'rating' -%}
        {%- comment -%}If the previous block is of type price, then the rating has been rendered inside it so we do not render it twice{%- endcomment -%}

        {%- if previous_block.type != 'price' -%}
          <div class="product-info__rating">
            {%- render 'product-rating', product: product, show_empty: block.settings.show_empty, block: block -%}
          </div>
        {%- endif -%}

      {%- when 'payment_terms' -%}
        <payment-terms class="product-info__payment-terms" form="{{ product_form_id }}" {{ block.shopify_attributes }}>
          {%- capture product_installment_form_id -%}product-installment-form-{{ section.id }}-{{ product.id }}{%- endcapture -%}

          {%- form 'product', product, id: product_installment_form_id -%}
            <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
            {{- form | payment_terms -}}
          {%- endform -%}
        </payment-terms>

      {%- when 'separator' -%}
        <hr class="product-info__separator" {{ block.shopify_attributes }}>

      {%- when 'description' -%}
        {%- if block.settings.collapse_content -%}
          {%- if product.description != blank -%}
            {%- capture accordion_title -%}{{ 'product.general.description' | t }}{%- endcapture -%}
            {%- capture accordion_content -%}<div class="prose">{{ product.metafields.impact_theme.store_description | metafield_tag | default: product.description }}</div>{%- endcapture -%}

            {%- render 'accordion',
              title: accordion_title,
              content: accordion_content,
              class: 'product-info__accordion',
              block: block
            -%}
          {%- endif -%}
        {%- else -%}
          {%- if product.description != blank -%}
            <div class="product-info__description" {{ block.shopify_attributes }}>
              <div class="prose">
                {{- product.metafields.impact_theme.store_description | metafield_tag | default: product.description -}}
              </div>
            </div>
          {%- endif -%}
        {%- endif -%}

      {%- when 'variant_picker' -%}
        <div class="product-info__variant-picker" {{ block.shopify_attributes }}>
          {%- render 'variant-picker',
            product: product,
            form_id: product_form_id,
            update_url: update_url,
            hide_sold_out_variants: block.settings.hide_sold_out_variants,
            block: block
          -%}
        </div>

      {%- when 'product_variations' -%}
        {%- assign contains_product = false -%}

        {%- for product_variation in block.settings.products -%}
          {%- if product_variation == product -%}
            {%- assign contains_product = true -%}
          {%- endif -%}
        {%- endfor -%}

        {%- if contains_product -%}
          {%- comment -%}
            IMPLEMENTATION NOTE: this feature allows to connect different products on the same page. It is therefore
            visually similar to a variant picker, although it does not share the functionality
          {%- endcomment -%}

          <div class="product-info__product-picker" {{ block.shopify_attributes }}>
            <div class="variant-picker">
              <fieldset class="variant-picker__option">
                {%- assign metafield_parts = block.settings.option_value_metafield | split: '.' -%}
                {%- assign metafield_namespace = metafield_parts | first -%}
                {%- assign metafield_key = metafield_parts | last -%}

                {%- if block.settings.option_name != blank -%}
                  <div class="variant-picker__option-info">
                    <div class="h-stack gap-2">
                      <legend class="text-subdued">{{ block.settings.option_name | escape }}:</legend>
                      <span>{{ product.metafields[metafield_namespace][metafield_key].value | escape }}</span>
                    </div>
                  </div>
                {%- endif -%}

                <div class="variant-picker__option-values wrap gap-2">
                  {%- for product_variation in block.settings.products -%}
                    {%- assign value = product_variation.metafields[metafield_namespace][metafield_key].value -%}

                    {%- if product_variation == product -%}
                      {%- assign selected = true -%}
                    {%- else -%}
                      {%- assign selected = false -%}
                    {%- endif -%}

                    {%- case block.settings.selector_style -%}
                      {%- when 'swatch' -%}
                        {%- render 'option-value',
                          type: 'swatch',
                          href: product_variation.url,
                          value: value,
                          selected: selected
                        -%}

                      {%- when 'variant_image' -%}
                        {%- render 'option-value',
                          type: 'thumbnail',
                          href: product_variation.url,
                          value: value,
                          image: product_variation.featured_media,
                          selected: selected,
                          bordered: true
                        -%}

                      {%- when 'block' -%}
                        {%- render 'option-value',
                          type: 'block',
                          href: product_variation.url,
                          value: value,
                          selected: selected
                        -%}

                      {%- when 'block_swatch' -%}
                        {%- render 'option-value',
                          type: 'block',
                          href: product_variation.url,
                          value: value,
                          selected: selected,
                          show_swatch: true
                        -%}
                    {%- endcase -%}
                  {%- endfor -%}
                </div>
              </fieldset>
            </div>
          </div>
        {%- endif -%}

      {%- when 'line_item_property' -%}
        {%- if block.settings.label != blank -%}
          {%- capture name -%}properties[{{ block.settings.label | escape }}]{%- endcapture -%}

          <div class="product-info__property" {{ block.shopify_attributes }}>
            {%- if block.settings.type == 'text' -%}
              {%- if block.settings.allow_long_text -%}
                {%- render 'input',
                  label: block.settings.label,
                  name: name,
                  form: product_form_id,
                  multiline: 4,
                  required: block.settings.required,
                  maxlength: block.settings.max_length
                -%}
              {%- else -%}
                {%- render 'input',
                  type: 'text',
                  label: block.settings.label,
                  name: name,
                  form: product_form_id,
                  required: block.settings.required,
                  maxlength: block.settings.max_length
                -%}
              {%- endif -%}
            {%- else -%}
              {%- render 'checkbox',
                label: block.settings.label,
                name: name,
                required: block.settings.required,
                form: product_form_id
              -%}
            {%- endif -%}
          </div>
        {%- endif -%}

      {%- when 'quantity_selector' -%}
        {%- if product.available -%}
          <div class="product-info__quantity-selector {{ block.shopify_attributes }}">
            <div class="form-control">
              <label for="{{ product_form_id }}-quantity" class="block-label text-subdued">
                {{- 'product.quantity.label' | t -}}
                :</label
              >

              <quantity-selector class="quantity-selector">
                <button
                  type="button"
                  class="quantity-selector__button"
                  aria-label="{{ 'product.quantity.decrease_quantity' | t }}"
                >
                  {% render 'icon' with 'minus', width: 10, height: 2 %}
                </button>
                <input
                  id="{{ product_form_id }}-quantity"
                  type="text"
                  is="quantity-input"
                  inputmode="numeric"
                  class="quantity-selector__input"
                  name="quantity"
                  form="{{ product_form_id }}"
                  size="2"
                  value="1"
                  autocomplete="off"
                >
                <button
                  type="button"
                  class="quantity-selector__button"
                  aria-label="{{ 'product.quantity.increase_quantity' | t }}"
                >
                  {% render 'icon' with 'plus', width: 10, height: 10 %}
                </button>
              </quantity-selector>
            </div>
          </div>
        {%- endif -%}

      {%- when 'inventory' -%}
        <div class="product-info__inventory {{ block.shopify_attributes }}">
          {%- render 'inventory',
            product: product,
            low_threshold: block.settings.low_inventory_threshold,
            form_id: product_form_id
          -%}
        </div>

      {%- when 'countdown_timer' -%}
        {% assign now_date = 'now' | date: '%b %d, %Y' %}

        {% assign start_date = block.settings.count_date | date: '%b %d, %Y' %}
        {% assign end_date = block.settings.count_date_picker | date: '%b %d, %Y' %}
        {%- if block.settings.enable_counter -%}
          <div
            class="countdown-timer-section countdown"
            style="background: url('{{ block.settings.counter_image | image_url }}'); border-radius: 5px; background-size: cover;"
          >
            <h5>{{ block.settings.title }}</h5>
            <div class="timer">
              <div class="timer-display">
                <div class="timer-block">
                  <span class="timer-block__num js-timer-days">00</span>
                  <span class="timer-block__unit">DAYS</span>
                </div>
                <div class="timer-block">
                  <span class="timer-block__num js-timer-hours">00</span>
                  <span class="timer-block__unit">HRS</span>
                </div>
                <div class="timer-block">
                  <span class="timer-block__num js-timer-minutes">00</span>
                  <span class="timer-block__unit">MINS</span>
                </div>
                <div class="timer-block">
                  <span class="timer-block__num js-timer-seconds">00</span>
                  <span class="timer-block__unit">SECS</span>
                </div>
                <style>
                  .soldout_progress_container {
                    background: linear-gradient(rgba(0,0,0,{{ block.settings.counter_opacity }}), rgba(0,0,0,{{ block.settings.counter_opacity }}));
                    text-align: center;
                    width: 100%;
                    padding: 10px 20px;
                    border-radius: 5px;
                    margin: 0 5px;
                  }
                  {% if block.settings.enable_progress == true %}
                  .soldout_progress_container {
                     display: none;
                   }
                  {% endif %}
                </style>
                <h6 class="soldout_progress_container">
                  <div>
                    <div class="soldout_progress_container_message">{{ block.settings.counter_subtitle }}</div>
                    {% if block.settings.enable_progress == true %}
                      <div class="h--progress_bar_container">
                        <div class="h--progress_bar_width"></div>
                      </div>
                    {% endif %}
                  </div>
                </h6>
              </div>
            </div>
          </div>
        {%- endif -%}
        <script
          type="text/javascript"
        >
        // initial variables
        let second = 1000;
        let minute = second * 60;
        let hour = minute * 60;
        let day = hour * 24;

        // variables for settings
        let startNumber = Number({{ block.settings.start_number }});
        let endNumber = Number({{ block.settings.end_number }});
        let totalIncrements = Math.floor((endNumber - startNumber) / 0.1);


        let now = new Date().toLocaleString('en-US', { timeZone: '{{ block.settings.timezone }}' });

        let startTime = new Date('{{- start_date -}}').getTime();
        let endDateTime = new Date('{{- end_date -}}').getTime();

        // Check if end date is greater than current time
        if (endDateTime > new Date(now).getTime()) {
            let x = setInterval(function () {
                let now = new Date().toLocaleString('en-US', { timeZone: '{{ block.settings.timezone }}' });
                let nowTime = new Date(now).getTime();
                let distance = endDateTime - nowTime;

                let distanceNew = nowTime - startTime;

                let remainingMinutes = Math.floor(distanceNew / (1000 * 60));

                {% if block.settings.enable_progress == true %}

                var totalDuration = endDateTime - startTime;
                var elapsedTime = nowTime - startTime;
                var percentagePassed = (elapsedTime / totalDuration) * 100;
                var difference = endNumber - startNumber;

                let progressValue = Number(Number(remainingMinutes / totalIncrements).toFixed(1));
                let newProgressBarNumber = startNumber + progressValue;
                var percentageOfDifference = (difference * percentagePassed) / 100;
                var progress = startNumber + percentageOfDifference;
                    progress = progress.toFixed(1);

                          if (progress < startNumber) {
            progress = startNumber
        }
        else if (progress > endNumber) {
            progress = endNumber
        }

                document.querySelector(".soldout_progress_container_message").innerHTML = document.querySelector(".soldout_progress_container_message").innerHTML.replace("{number}", progress);
                document.querySelector(".h--progress_bar_width").setAttribute("style", `width:${progress - 8}%;`)
                document.querySelector(".soldout_progress_container").setAttribute("style", `display:block;`)

                {% endif %}
                // Calculate remaining time values
                let days = Math.floor(distance / day),
                    hours = Math.floor((distance % day) / hour),
                    minutes = Math.floor((distance % hour) / minute),
                    seconds = Math.floor((distance % minute) / second);

                // Add leading zeros if values are less than 10
                days = (days < 10) ? '0' + days : days;
                hours = (hours < 10) ? '0' + hours : hours;
                minutes = (minutes < 10) ? '0' + minutes : minutes;
                seconds = (seconds < 10) ? '0' + seconds : seconds;

                // Update the timer display
                document.querySelector('.js-timer-days').innerText = days;
                document.querySelector('.js-timer-hours').innerText = hours;
                document.querySelector('.js-timer-minutes').innerText = minutes;
                document.querySelector('.js-timer-seconds').innerText = seconds;

                // If the countdown is over, display a message
                if (distance < 0) {
                    clearInterval(x);
                    document.querySelector('.countdown').innerText = 'Countdown expired';
                }
            }, second);
        } else {
            // End date is in the past, handle accordingly (e.g., display a message)
            document.querySelector('.countdown').innerText = 'End date has passed';
        }
        </script>
      {%- when 'buy_buttons' -%}
        {%- assign main_form_exists = true -%}

        {%- if request.page_type != 'password' -%}
          <div
            class="product-info__buy-buttons"
            style="--mobile-order:{{ block.settings.position_order }}"
            {{ block.shopify_attributes }}
          >
            {%- render 'buy-buttons',
              product: product,
              form_id: product_form_id,
              show_payment_button: block.settings.show_payment_button,
              show_gift_card_recipient: block.settings.show_gift_card_recipient,
              atc_button_background: block.settings.atc_button_background,
              atc_button_text_color: block.settings.atc_button_text_color,
              payment_button_background: block.settings.payment_button_background,
              payment_button_text_color: block.settings.payment_button_text_color,
              button_size: 'base'
            -%}
          </div>
        {%- endif -%}

      {%- when 'pickup_availability' -%}
        <div class="product-info__pickup-availability" {{ block.shopify_attributes }}>
          {%- render 'pickup-availability',
            product_variant: product.selected_or_first_available_variant,
            form_id: product_form_id
          -%}
        </div>

      {%- when 'text' -%}
        {%- if block.settings.text != blank -%}
          <div class="product-info__text" {{ block.shopify_attributes }}>
            <div class="prose">
              {{- block.settings.text -}}
            </div>
          </div>
        {%- endif -%}

      {%- when 'collapsible_text' -%}
        {%- if block.settings.title != blank
          and block.settings.content != blank
          or block.settings.page.content != blank
        -%}
          {%- capture accordion_content -%}<div class="prose">{{ block.settings.page.content | default: block.settings.content }}</div>{%- endcapture -%}
          {%- render 'accordion',
            title: block.settings.title,
            content: accordion_content,
            class: 'product-info__accordion',
            block: block
          -%}
        {%- endif -%}

      {%- when 'image' -%}
        {%- if block.settings.image != blank -%}
          <div class="product-info__image" {{ block.shopify_attributes }}>
            {%- capture sizes -%}{{ block.settings.max_width }}px{%- endcapture -%}
            {%- capture widths -%}{{ block.settings.max_width }}, {{ block.settings.max_width | times: 2 | at_most: block.settings.image.width }}{%- endcapture -%}
            {%- capture style -%}width: {{ block.settings.max_width }}px; {% if block.settings.alignment == 'center' %}margin-inline: auto{% elsif block.settings.alignment == 'end' %}margin-inline-start: auto;{% endif %}{%- endcapture -%}
            {{-
              block.settings.image
              | image_url: width: block.settings.image.width
              | image_tag: loading: 'lazy', style: style, sizes: sizes, widths: widths
            -}}
          </div>
        {%- endif -%}

      {%- when 'button' -%}
        {%- if block.settings.text != blank -%}
          <div class="product-info__button" {{ block.shopify_attributes }}>
            {%- render 'button',
              content: block.settings.text,
              href: block.settings.link,
              size: block.settings.size,
              style: block.settings.style,
              stretch: block.settings.stretch,
              background: block.settings.background,
              text_color: block.settings.text_color
            -%}
          </div>
        {%- endif -%}

      {%- when 'liquid' -%}
        {%- if block.settings.liquid != blank -%}
          <div class="product-info__liquid" {{ block.shopify_attributes }}>
            {{ block.settings.liquid }}
          </div>
        {%- endif -%}

      {% when 'icons' %}
        <div class="icons-container">
          <div class="icon-container">
            {% if block.settings.icon_1 != blank %}<img src="{{ block.settings.icon_1 | image_url }}">{% endif %}
            {% if block.settings.icon_2 != blank %}<img src="{{ block.settings.icon_2 | image_url }}">{% endif %}
            {% if block.settings.icon_3 != blank %}<img src="{{ block.settings.icon_3 | image_url }}">{% endif %}
          </div>
          <div class="text-container">
            {% if block.settings.text_1 != blank %}
              <p>{{ block.settings.text_1 }}</p>
            {% endif %}
            {% if block.settings.text_2 != blank %}
              <p>{{ block.settings.text_2 }}</p>
            {% endif %}
            {% if block.settings.text_3 != blank %}
              <p>{{ block.settings.text_3 }}</p>
            {% endif %}
          </div>
        </div>

      {%- when 'associated_products' -%}
        <product-recommendations
          class="block"
          product="{{ product.id }}"
          limit="{{ block.settings.products_count }}"
          intent="complementary"
          {{ block.shopify_attributes }}
        >
          {%- if recommendations.performed and recommendations.products_count > 0 -%}
            <div class="product-info__complementary-products v-stack gap-3 sm:gap-4">
              {%- assign carousel_id = 'carousel-' | append: block.id -%}

              {%- if block.settings.title != blank
                or block.settings.stack_products == false
                and recommendations.products_count > 1
              -%}
                <div class="h-stack justify-between gap-4">
                  {%- if block.settings.title != blank -%}
                    <p>{{ block.settings.title | escape }}</p>
                  {%- endif -%}

                  {%- if block.settings.stack_products == false and recommendations.products_count > 1 -%}
                    <div class="h-stack gap-2 hidden sm:flex">
                      <button
                        is="prev-button"
                        class="circle-chevron hover:colors"
                        aria-controls="{{ carousel_id }}"
                        aria-label="{{ 'general.accessibility.previous' | t | escape }}"
                        disabled
                      >
                        {%- render 'icon' with 'chevron-left-small', direction_aware: true -%}
                      </button>
                      <button
                        is="next-button"
                        class="circle-chevron hover:colors"
                        aria-controls="{{ carousel_id }}"
                        aria-label="{{ 'general.accessibility.next' | t | escape }}"
                      >
                        {%- render 'icon' with 'chevron-right-small', direction_aware: true -%}
                      </button>
                    </div>
                  {%- endif -%}
                </div>
              {%- endif -%}

              {%- capture horizontal_products -%}
                {%- for associated_product in recommendations.products -%}
                  {%- render 'horizontal-product', product: associated_product, show_add_to_cart: true, background: block.settings.background, text_color: block.settings.text_color -%}
                {%- endfor -%}
              {%- endcapture -%}

              {%- assign horizontal_products_blends = true -%}
              {%- assign section_background = section.settings.background_gradient
                | default: section.settings.background
                | default: settings.background
              -%}

              {%- if block.settings.background != 'rgba(0,0,0,0)'
                and block.settings.background != blank
                and block.settings.background != section_background
              -%}
                {%- assign horizontal_products_blends = false -%}
              {%- endif -%}

              {%- if block.settings.stack_products -%}
                <div class="horizontal-product-list {% if horizontal_products_blends %}border divide-y rounded-xs{% else %}separate{% endif %}">
                  {{- horizontal_products -}}
                </div>
              {%- else -%}
                <scroll-carousel
                  selector=".horizontal-product"
                  id="{{ carousel_id }}"
                  class="horizontal-product-list-carousel {% unless horizontal_products_blends %}separate{% endunless %} scroll-area bleed sm:unbleed"
                >
                  <div class="horizontal-product-list {% if horizontal_products_blends %}divide-x{% else %}separate{% endif %}">
                    {{- horizontal_products -}}
                  </div>
                </scroll-carousel>
              {%- endif -%}
            </div>
          {%- endif -%}
        </product-recommendations>

      {%- when 'offer' -%}
        {%- if previous_block.type != 'offer' and next_block.type == 'offer' -%}
          <div class="product-info__offer-list">
        {%- endif -%}

        {%- if block.settings.title != blank or block.settings.content != blank -%}
          {%- render 'offer', block: block -%}
        {%- endif -%}

        {%- if forloop.last or previous_block.type == 'offer' and next_block.type != 'offer' -%}
          </div>
        {%- endif -%}

      {%- when 'share_buttons' -%}
        <div
          class="product-form__share {% if block.settings.alignment == 'center' %}justify-self-center{% elsif block.settings.alignment == 'end' %}justify-self-end{% endif %}"
          {{ block.shopify_attributes }}
        >
          <div class="product-info__share-buttons">
            <div class="share-buttons">
              <span class="text-subdued">{{- 'general.social.share' | t -}}</span>

              <ul class="h-stack" role="list">
                <li>
                  <a
                    href="{% render 'share-link', host: 'facebook', title: product.title, description: product.description, url: product.url %}"
                    class="share-buttons__item"
                    aria-label="{{ 'general.social.share_on' | t: social_media: 'Facebook' }}"
                  >
                    {%- render 'icon' with 'facebook', width: 20, height: 20 -%}
                  </a>
                </li>
                <li>
                  <a
                    href="{% render 'share-link', host: 'twitter', title: product.title, description: product.description, url: product.url %}"
                    class="share-buttons__item"
                    aria-label="{{ 'general.social.share_on' | t: social_media: 'Twitter' }}"
                  >
                    {%- render 'icon' with 'twitter', width: 20, height: 20 -%}
                  </a>
                </li>
                <li>
                  <a
                    href="{% render 'share-link', host: 'pinterest', title: product.title, description: product.description, url: product.url %}"
                    class="share-buttons__item"
                    aria-label="{{ 'general.social.share_on' | t: social_media: 'Pinterest' }}"
                  >
                    {%- render 'icon' with 'pinterest', width: 20, height: 20 -%}
                  </a>
                </li>
                <li>
                  <a
                    href="{% render 'share-link', host: 'email', title: product.title, description: product.description, url: product.url %}"
                    class="share-buttons__item"
                    aria-label="{{ 'general.social.share_email' | t }}"
                  >
                    {%- render 'icon' with 'email' -%}
                  </a>
                </li>
              </ul>
            </div>
          </div>

          <button is="share-button" class="product-info__native-share">
            {%- render 'icon' with 'share' -%}
            {{- 'general.social.share' | t -}}
          </button>
        </div>
      {%- when 'icon-badge' -%}
        {%- if block.settings.text != blank -%}
          <div class="product-info__icon-badge" {{ block.shopify_attributes }}>
            {%- assign icon = block.settings.icon_text | handle | default: block.settings.icon -%}
            {% render 'text-icon-badge',
              content: block.settings.text,
              icon: icon,
              icon_location: block.settings.icon_location,
              style: block.settings.style,
              color: block.settings.text_color.rgb,
              background: block.settings.background_color.rgb,
              background_hover: block.settings.background_hover_color.rgb,
              drawer_id: block.id
            %}
          </div>
        {%- endif -%}
      {%- when 'shipping' -%}
        <div class="shipping-text-container">
          <div class="shipping-item">
            <img src="{{ block.settings.icon_1 | image_url }}" width="24" >
            <p class="title">{{ block.settings.title_1 }}</p>
            <p class="shipping-text">{{ block.settings.shipping_1 }}</p>
          </div>
          {% if block.settings.title_2 != blank %}<div class="shipping-line"></div>{% endif %}
          {% if block.settings.title_2 != blank %}
            <div class="shipping-item">
              <img src="{{ block.settings.icon_2 | image_url }}" width="24" >
              <p class="title">{{ block.settings.title_2 }}</p>
              <p class="shipping-text">{{ block.settings.shipping_2 }}</p>
            </div>
          {% endif %}
        </div>
      {%- when 'urgency' -%}
        {% liquid
          assign start_date = block.settings.start_time | date: '%s'
          assign end_date = block.settings.end_time | date: '%s'
          assign current_date = 'now' | date: '%s'
          assign show_urgency = true
          if block.settings.hide_before_start and start_date > current_date
            assign show_urgency = false
          endif
          if block.settings.hide_after_end and current_date > end_date
            assign show_urgency = false
          endif
        %}
        {% if show_urgency %}
          <div class="product-info__urgency" {{ block.shopify_attributes }}>
            <div class="prose">
              <p>{% render 'fa-urgency-text', settings: block.settings %}</p>
            </div>
          </div>
        {% endif %}
      {%- when 'urgency-badge' -%}
        {% liquid
          assign start_date = block.settings.start_time | date: '%s'
          assign end_date = block.settings.end_time | date: '%s'
          assign current_date = 'now' | date: '%s'
          assign show_urgency = true
          if block.settings.hide_before_start and start_date > current_date
            assign show_urgency = false
          endif
          if block.settings.hide_after_end and current_date > end_date
            assign show_urgency = false
          endif
        %}
        {% if show_urgency %}
          <div class="product-info__urgency-badge" {{ block.shopify_attributes }}>
            {%- assign icon = block.settings.icon_text | handle | default: block.settings.icon -%}
            {% capture content %}
            {% render 'fa-urgency-text', settings: block.settings %}
          {% endcapture %}
            {% render 'text-icon-badge',
              content: content,
              icon: icon,
              icon_location: block.settings.icon_location,
              style: block.settings.style,
              color: block.settings.text_color.rgb,
              background: block.settings.background_color.rgb,
              background_hover: block.settings.background_hover_color.rgb,
              drawer_id: block.id
            %}
          </div>
        {% endif %}
    {%- endcase -%}
  {%- endfor -%}

  {%- comment -%}
    IMPLEMENTATION NOTE: under rare circumstances, merchant may want to show selectors to allow variant selection, but hide
    the add to cart button. This is however problematic as product info is changed based on the form, so we create a default
    one if no buy buttons exists
  {%- endcomment -%}

  {%- unless main_form_exists -%}
    {%- form 'product', product, id: product_form_id, hidden: true -%}
      <input type="hidden" disabled name="id" value="{{ product.selected_or_first_available_variant.id }}">
    {%- endform -%}
  {%- endunless -%}
</safe-sticky>
